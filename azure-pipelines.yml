trigger:
- main  # Trigger pipeline on main branch changes

pool:
  vmImage: 'ubuntu-latest'  # Use Microsoft-hosted agent (Ubuntu)

variables:
  azureSubscription: 'dot-testSC'  # Azure Service Connection
  appName: 'web-plan'  # Azure App Service Name
  resourceGroupName: 'dot-testRG'  # Azure Resource Group
  slotName: 'Production'  # Deployment slot
  nodeVersion: '20.x'  # Node.js version

steps:
# Step 1: Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '$(nodeVersion)'
  displayName: 'Install Node.js'

# Step 2: Fix SSL Certificate Issue (Permanent)
- script: |
    curl -o cacert.pem https://curl.se/ca/cacert.pem
    export NODE_EXTRA_CA_CERTS=$(pwd)/cacert.pem
    echo "SSL certificate fixed"
  displayName: 'Fix SSL Certificates (Linux/Mac)'

- script: |
    curl -o cacert.pem https://curl.se/ca/cacert.pem
    IF EXIST cacert.pem (
      set NODE_EXTRA_CA_CERTS=%CD%\cacert.pem
    ) ELSE (
      echo "Certificate download failed" && exit /b 1
    )
  displayName: 'Fix SSL Certificates (Windows)'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

# Step 3: Bypass SSL Temporarily (Testing Only - Not for Production)
- script: |
    export NODE_TLS_REJECT_UNAUTHORIZED=0
  displayName: 'Bypass SSL Verification (Linux/Mac)'

- script: |
    set NODE_TLS_REJECT_UNAUTHORIZED=0
  displayName: 'Bypass SSL Verification (Windows)'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

# Step 4: Install dependencies and build project
- script: |
    npm install
    npm run build
  displayName: 'Install Dependencies and Build'

# Step 5: Lint the Code (Optional)
- script: |
    npm run lint
  displayName: 'Run Linter'

# Step 6: Run Unit Tests (Optional)
- script: |
    npm test
  displayName: 'Run Unit Tests'

# Step 7: Archive Project Files for Deployment
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)'  
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
    replaceExistingArchive: true
  displayName: 'Archive Application Files'

# Step 8: Publish Artifact
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)/app.zip'
    artifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish Build Artifacts'

# Step 9: Deploy to Azure App Service
- task: AzureWebApp@1
  inputs:
    azureSubscription: '$(azureSubscription)'
    appName: '$(appName)'
    package: '$(Build.ArtifactStagingDirectory)/app.zip'
    deployToSlotOrASE: true
    resourceGroupName: '$(resourceGroupName)'
    slotName: '$(slotName)'
  displayName: 'Deploy to Azure App Service'
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'  # Use Linux agent to avoid Windows export issues

variables:
  azureSubscription: 'dot-testSC'
  appName: 'web-plan'
  resourceGroupName: 'dot-testRG'
  slotName: 'Production'
  nodeVersion: '20.x'

steps:
# Step 1: Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '$(nodeVersion)'
  displayName: 'Install Node.js'

# Step 2: Fix SSL Certificate Issue (Permanent for Linux/Mac)
- script: |
    curl -o cacert.pem https://curl.se/ca/cacert.pem
    echo "NODE_EXTRA_CA_CERTS=$(pwd)/cacert.pem" >> $GITHUB_ENV
    echo "SSL certificate fixed"
  displayName: 'Fix SSL Certificates (Linux/Mac)'
  condition: ne(variables['Agent.OS'], 'Windows_NT')  # Run only on Linux/Mac agents

# Step 3: Fix SSL Certificate for Windows (cmd compatible)
- script: |
    curl -o cacert.pem https://curl.se/ca/cacert.pem
    IF EXIST cacert.pem (
      echo "Certificate downloaded"
      echo "set NODE_EXTRA_CA_CERTS=%CD%\cacert.pem" >> %GITHUB_ENV%
    ) ELSE (
      echo "Certificate download failed" && exit /b 1
    )
  displayName: 'Fix SSL Certificates (Windows)'
  condition: eq(variables['Agent.OS'], 'Windows_NT')  # Run only on Windows agents

# Step 4: Bypass SSL Temporarily (For Debugging Only)
- script: |
    set NODE_TLS_REJECT_UNAUTHORIZED=0
  displayName: 'Bypass SSL Verification (Windows)'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- script: |
    export NODE_TLS_REJECT_UNAUTHORIZED=0
  displayName: 'Bypass SSL Verification (Linux/Mac)'
  condition: ne(variables['Agent.OS'], 'Windows_NT')

# Step 5: Install dependencies and build
- script: |
    npm install
    npm run build
  displayName: 'Install Dependencies and Build'

# Step 6: Lint the Code
- script: |
    npm run lint
  displayName: 'Run Linter'

# Step 7: Run Tests
- script: |
    npm test
  displayName: 'Run Unit Tests'

# Step 8: Archive Project Files
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
    replaceExistingArchive: true
  displayName: 'Archive Application Files'

# Step 9: Publish Artifact
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)/app.zip'
    artifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish Build Artifacts'

# Step 10: Deploy to Azure App Service
- task: AzureWebApp@1
  inputs:
    azureSubscription: '$(azureSubscription)'
    appName: '$(appName)'
    package: '$(Build.ArtifactStagingDirectory)/app.zip'
    deployToSlotOrASE: true
    resourceGroupName: '$(resourceGroupName)'
    slotName: '$(slotName)'
  displayName: 'Deploy to Azure App Service'